/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.19).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Body;
import io.swagger.model.ModelApiResponse;
import org.threeten.bp.OffsetDateTime;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.Date;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-07-07T04:15:47.323Z[GMT]")
@Api(value = "findAllEventsWithoutLogin", description = "the findAllEventsWithoutLogin API")
public interface FindAllEventsWithoutLoginApi {

    @ApiOperation(value = "getAllEvents", nickname = "getAllEvents", notes = "Fetch all events without login", response = ModelApiResponse.class, tags={ "events", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ModelApiResponse.class),
        @ApiResponse(code = 400, message = "Invalid response") })
    @RequestMapping(value = "/findAllEventsWithoutLogin",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ModelApiResponse> getAllEvents(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "start_date", required = true) Date startDate
,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "end_date", required = true) Date endDate
);


    @ApiOperation(value = "getAllEvents", nickname = "getAllEventsWithPost", notes = "Fetch all events without login", response = ModelApiResponse.class, tags={ "events", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ModelApiResponse.class),
        @ApiResponse(code = 400, message = "Invalid response") })
    @RequestMapping(value = "/findAllEventsWithoutLogin",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<ModelApiResponse> getAllEventsWithPost(@ApiParam(value = ""  )  @Valid @RequestBody Body body
);

}
